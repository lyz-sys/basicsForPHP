<?php

namespace learn\src\Facade;

/**
 * @method static \learn\src\Db\RedisManager connect($host, $port, $timeout, $reserved, $retryInterval, $readTimeout)
 * @method static \learn\src\Db\RedisManager open($host, $port, $timeout, $reserved, $retryInterval, $readTimeout)
 * @method static \learn\src\Db\RedisManager isConnected()
 * @method static \learn\src\Db\RedisManager getHost()
 * @method static \learn\src\Db\RedisManager getPort()
 * @method static \learn\src\Db\RedisManager getDbNum()
 * @method static \learn\src\Db\RedisManager getTimeout()
 * @method static \learn\src\Db\RedisManager getReadTimeout()
 * @method static \learn\src\Db\RedisManager getPersistentID()
 * @method static \learn\src\Db\RedisManager getAuth()
 * @method static \learn\src\Db\RedisManager pconnect($host, $port, $timeout, $reserved, $retryInterval, $readTimeout)
 * @method static \learn\src\Db\RedisManager popen($host, $port, $timeout, $reserved, $retryInterval, $readTimeout)
 * @method static \learn\src\Db\RedisManager close()
 * @method static \learn\src\Db\RedisManager swapdb(int $db1, int $db2)
 * @method static \learn\src\Db\RedisManager setOption($option, $value)
 * @method static \learn\src\Db\RedisManager getOption($option)
 * @method static \learn\src\Db\RedisManager ping($message = null)
 * @method static \learn\src\Db\RedisManager echo($message)
 * @method static \learn\src\Db\RedisManager get($key)
 * @method static \learn\src\Db\RedisManager set($key, $value, $timeout = null)
 * @method static \learn\src\Db\RedisManager setex($key, $expire, $value)
 * @method static \learn\src\Db\RedisManager psetex($key, $expire, $value)
 * @method static \learn\src\Db\RedisManager setnx($key, $value)
 * @method static \learn\src\Db\RedisManager del($key1, ...$otherKeys)
 * @method static \learn\src\Db\RedisManager delete($key1, $key2 = null, $key3 = null)
 * @method static \learn\src\Db\RedisManager unlink($key1, $key2 = null, $key3 = null)
 * @method static \learn\src\Db\RedisManager multi($mode)
 * @method static \learn\src\Db\RedisManager pipeline()
 * @method static \learn\src\Db\RedisManager exec()
 * @method static \learn\src\Db\RedisManager discard()
 * @method static \learn\src\Db\RedisManager watch($key)
 * @method static \learn\src\Db\RedisManager unwatch()
 * @method static \learn\src\Db\RedisManager subscribe($channels, $callback)
 * @method static \learn\src\Db\RedisManager psubscribe($patterns, $callback)
 * @method static \learn\src\Db\RedisManager unsubscribe($channels = null)
 * @method static \learn\src\Db\RedisManager punsubscribe($patterns = null)
 * @method static \learn\src\Db\RedisManager exists($key)
 * @method static \learn\src\Db\RedisManager incr($key)
 * @method static \learn\src\Db\RedisManager incrByFloat($key, $increment)
 * @method static \learn\src\Db\RedisManager incrBy($key, $value)
 * @method static \learn\src\Db\RedisManager decr($key)
 * @method static \learn\src\Db\RedisManager decrBy($key, $value)
 * @method static \learn\src\Db\RedisManager lPush($key, ...$value1)
 * @method static \learn\src\Db\RedisManager rPush($key, ...$value1)
 * @method static \learn\src\Db\RedisManager lPushx($key, $value)
 * @method static \learn\src\Db\RedisManager rPushx($key, $value)
 * @method static \learn\src\Db\RedisManager lPop($key)
 * @method static \learn\src\Db\RedisManager rPop($key)
 * @method static \learn\src\Db\RedisManager blPop($keys, $timeout)
 * @method static \learn\src\Db\RedisManager brPop(array $keys, $timeout)
 * @method static \learn\src\Db\RedisManager lLen($key)
 * @method static \learn\src\Db\RedisManager lSize($key)
 * @method static \learn\src\Db\RedisManager lIndex($key, $index)
 * @method static \learn\src\Db\RedisManager lGet($key, $index)
 * @method static \learn\src\Db\RedisManager lSet($key, $index, $value)
 * @method static \learn\src\Db\RedisManager lRange($key, $start, $end)
 * @method static \learn\src\Db\RedisManager lGetRange($key, $start, $end)
 * @method static \learn\src\Db\RedisManager lTrim($key, $start, $stop)
 * @method static \learn\src\Db\RedisManager listTrim($key, $start, $stop)
 * @method static \learn\src\Db\RedisManager lRem($key, $value, $count)
 * @method static \learn\src\Db\RedisManager lRemove($key, $value, $count)
 * @method static \learn\src\Db\RedisManager lInsert($key, $position, $pivot, $value)
 * @method static \learn\src\Db\RedisManager sAdd($key, ...$value1)
 * @method static \learn\src\Db\RedisManager sRem($key, ...$member1)
 * @method static \learn\src\Db\RedisManager sRemove($key, ...$member1)
 * @method static \learn\src\Db\RedisManager sMove($srcKey, $dstKey, $member)
 * @method static \learn\src\Db\RedisManager sIsMember($key, $value)
 * @method static \learn\src\Db\RedisManager sContains($key, $value)
 * @method static \learn\src\Db\RedisManager sCard($key)
 * @method static \learn\src\Db\RedisManager sPop($key, $count = 1)
 * @method static \learn\src\Db\RedisManager sRandMember($key, $count = 1)
 * @method static \learn\src\Db\RedisManager sInter($key1, ...$otherKeys)
 * @method static \learn\src\Db\RedisManager sInterStore($dstKey, $key1, ...$otherKeys)
 * @method static \learn\src\Db\RedisManager sUnion($key1, ...$otherKeys)
 * @method static \learn\src\Db\RedisManager sUnionStore($dstKey, $key1, ...$otherKeys)
 * @method static \learn\src\Db\RedisManager sDiff($key1, ...$otherKeys)
 * @method static \learn\src\Db\RedisManager sDiffStore($dstKey, $key1, ...$otherKeys)
 * @method static \learn\src\Db\RedisManager sMembers($key)
 * @method static \learn\src\Db\RedisManager sGetMembers($key)
 * @method static \learn\src\Db\RedisManager sScan($key, &$iterator, $pattern = null, $count = 0)
 * @method static \learn\src\Db\RedisManager getSet($key, $value)
 * @method static \learn\src\Db\RedisManager randomKey()
 * @method static \learn\src\Db\RedisManager select($dbIndex)
 * @method static \learn\src\Db\RedisManager move($key, $dbIndex)
 * @method static \learn\src\Db\RedisManager rename($srcKey, $dstKey)
 * @method static \learn\src\Db\RedisManager renameKey($srcKey, $dstKey)
 * @method static \learn\src\Db\RedisManager renameNx($srcKey, $dstKey)
 * @method static \learn\src\Db\RedisManager expire($key, $ttl)
 * @method static \learn\src\Db\RedisManager pExpire($key, $ttl)
 * @method static \learn\src\Db\RedisManager setTimeout($key, $ttl)
 * @method static \learn\src\Db\RedisManager expireAt($key, $timestamp)
 * @method static \learn\src\Db\RedisManager pExpireAt($key, $timestamp)
 * @method static \learn\src\Db\RedisManager keys($pattern)
 * @method static \learn\src\Db\RedisManager getKeys($pattern)
 * @method static \learn\src\Db\RedisManager dbSize()
 * @method static \learn\src\Db\RedisManager auth($password)
 * @method static \learn\src\Db\RedisManager bgrewriteaof()
 * @method static \learn\src\Db\RedisManager slaveof($host = '127.0.0.1', $port = 6379)
 * @method static \learn\src\Db\RedisManager slowLog(string $operation, int $length = null)
 * @method static \learn\src\Db\RedisManager object($string = '', $key = '')
 * @method static \learn\src\Db\RedisManager save()
 * @method static \learn\src\Db\RedisManager bgsave()
 * @method static \learn\src\Db\RedisManager lastSave()
 * @method static \learn\src\Db\RedisManager wait($numSlaves, $timeout)
 * @method static \learn\src\Db\RedisManager type($key)
 * @method static \learn\src\Db\RedisManager append($key, $value)
 * @method static \learn\src\Db\RedisManager getRange($key, $start, $end)
 * @method static \learn\src\Db\RedisManager substr($key, $start, $end)
 * @method static \learn\src\Db\RedisManager setRange($key, $offset, $value)
 * @method static \learn\src\Db\RedisManager strlen($key)
 * @method static \learn\src\Db\RedisManager bitpos($key, $bit, $start = 0, $end = null)
 * @method static \learn\src\Db\RedisManager getBit($key, $offset)
 * @method static \learn\src\Db\RedisManager setBit($key, $offset, $value)
 * @method static \learn\src\Db\RedisManager bitCount($key)
 * @method static \learn\src\Db\RedisManager bitOp($operation, $retKey, $key1, ...$otherKeys)
 * @method static \learn\src\Db\RedisManager flushDB()
 * @method static \learn\src\Db\RedisManager flushAll()
 * @method static \learn\src\Db\RedisManager sort($key, $option = null)
 * @method static \learn\src\Db\RedisManager info($option = null)
 * @method static \learn\src\Db\RedisManager role()
 * @method static \learn\src\Db\RedisManager resetStat()
 * @method static \learn\src\Db\RedisManager ttl($key)
 * @method static \learn\src\Db\RedisManager pttl($key)
 * @method static \learn\src\Db\RedisManager persist($key)
 * @method static \learn\src\Db\RedisManager mset(array $array)
 * @method static \learn\src\Db\RedisManager getMultiple(array $keys)
 * @method static \learn\src\Db\RedisManager mGet(array $array)
 * @method static \learn\src\Db\RedisManager msetnx(array $array)
 * @method static \learn\src\Db\RedisManager rPopLPush($srcKey, $dstKey)
 * @method static \learn\src\Db\RedisManager bRPopLPush($srcKey, $dstKey, $timeout)
 * @method static \learn\src\Db\RedisManager zAdd($key, $options, $score1, $value1 = null, $score2 = null, $value2 = null, $scoreN = null, $valueN = null)
 * @method static \learn\src\Db\RedisManager zRange($key, $start, $end, $withscores = null)
 * @method static \learn\src\Db\RedisManager zRem($key, $member1, ...$otherMembers)
 * @method static \learn\src\Db\RedisManager zDelete($key, $member1, ...$otherMembers)
 * @method static \learn\src\Db\RedisManager zRevRange($key, $start, $end, $withscore = null)
 * @method static \learn\src\Db\RedisManager zRangeByScore($key, $start, $end, array $options = [])
 * @method static \learn\src\Db\RedisManager zRevRangeByScore($key, $start, $end, array $options = [])
 * @method static \learn\src\Db\RedisManager zRangeByLex($key, $min, $max, $offset = null, $limit = null)
 * @method static \learn\src\Db\RedisManager zRevRangeByLex($key, $min, $max, $offset = null, $limit = null)
 * @method static \learn\src\Db\RedisManager zCount($key, $start, $end)
 * @method static \learn\src\Db\RedisManager zRemRangeByScore($key, $start, $end)
 * @method static \learn\src\Db\RedisManager zDeleteRangeByScore($key, $start, $end)
 * @method static \learn\src\Db\RedisManager zRemRangeByRank($key, $start, $end)
 * @method static \learn\src\Db\RedisManager zDeleteRangeByRank($key, $start, $end)
 * @method static \learn\src\Db\RedisManager zCard($key)
 * @method static \learn\src\Db\RedisManager zSize($key)
 * @method static \learn\src\Db\RedisManager zScore($key, $member)
 * @method static \learn\src\Db\RedisManager zRank($key, $member)
 * @method static \learn\src\Db\RedisManager zRevRank($key, $member)
 * @method static \learn\src\Db\RedisManager zIncrBy($key, $value, $member)
 * @method static \learn\src\Db\RedisManager zUnionStore($output, $zSetKeys, ?array $weights = null, $aggregateFunction = 'SUM')
 * @method static \learn\src\Db\RedisManager zUnion($Output, $ZSetKeys, array $Weights = null, $aggregateFunction = 'SUM')
 * @method static \learn\src\Db\RedisManager zInterStore($output, $zSetKeys, array $weights = null, $aggregateFunction = 'SUM')
 * @method static \learn\src\Db\RedisManager zInter($Output, $ZSetKeys, array $Weights = null, $aggregateFunction = 'SUM')
 * @method static \learn\src\Db\RedisManager zScan($key, &$iterator, $pattern = null, $count = 0)
 * @method static \learn\src\Db\RedisManager bzPopMax($key1, $key2, $timeout)
 * @method static \learn\src\Db\RedisManager bzPopMin($key1, $key2, $timeout)
 * @method static \learn\src\Db\RedisManager zPopMax($key, $count = 1)
 * @method static \learn\src\Db\RedisManager zPopMin($key, $count = 1)
 * @method static \learn\src\Db\RedisManager hSet($key, $hashKey, $value)
 * @method static \learn\src\Db\RedisManager hSetNx($key, $hashKey, $value)
 * @method static \learn\src\Db\RedisManager hGet($key, $hashKey)
 * @method static \learn\src\Db\RedisManager hLen($key)
 * @method static \learn\src\Db\RedisManager hDel($key, $hashKey1, ...$otherHashKeys)
 * @method static \learn\src\Db\RedisManager hKeys($key)
 * @method static \learn\src\Db\RedisManager hVals($key)
 * @method static \learn\src\Db\RedisManager hGetAll($key)
 * @method static \learn\src\Db\RedisManager hExists($key, $hashKey)
 * @method static \learn\src\Db\RedisManager hIncrBy($key, $hashKey, $value)
 * @method static \learn\src\Db\RedisManager hIncrByFloat($key, $field, $increment)
 * @method static \learn\src\Db\RedisManager hMSet($key, $hashKeys)
 * @method static \learn\src\Db\RedisManager hMGet($key, $hashKeys)
 * @method static \learn\src\Db\RedisManager hScan($key, &$iterator, $pattern = null, $count = 0)
 * @method static \learn\src\Db\RedisManager hStrLen(string $key, string $field)
 * @method static \learn\src\Db\RedisManager geoAdd($key, $longitude, $latitude, $member)
 * @method static \learn\src\Db\RedisManager geoHash($key, ...$member)
 * @method static \learn\src\Db\RedisManager geoPos(string $key, string $member)
 * @method static \learn\src\Db\RedisManager geoDist($key, $member1, $member2, $unit = null)
 * @method static \learn\src\Db\RedisManager geoRadius($key, $longitude, $latitude, $radius, $unit, array $options = null)
 * @method static \learn\src\Db\RedisManager geoRadiusByMember($key, $member, $radius, $units, array $options = null)
 * @method static \learn\src\Db\RedisManager config($operation, $key, $value)
 * @method static \learn\src\Db\RedisManager eval($script, $args = [], $numKeys = 0)
 * @method static \learn\src\Db\RedisManager evaluate($script, $args = [], $numKeys = 0)
 * @method static \learn\src\Db\RedisManager evalSha($scriptSha, $args = [], $numKeys = 0)
 * @method static \learn\src\Db\RedisManager evaluateSha($scriptSha, $args = [], $numKeys = 0)
 * @method static \learn\src\Db\RedisManager script($command, $script)
 * @method static \learn\src\Db\RedisManager getLastError()
 * @method static \learn\src\Db\RedisManager clearLastError()
 * @method static \learn\src\Db\RedisManager client($command, $value = '')
 * @method static \learn\src\Db\RedisManager _prefix($value)
 * @method static \learn\src\Db\RedisManager _unserialize($value)
 * @method static \learn\src\Db\RedisManager _serialize($value)
 * @method static \learn\src\Db\RedisManager dump($key)
 * @method static \learn\src\Db\RedisManager restore($key, $ttl, $value)
 * @method static \learn\src\Db\RedisManager migrate($host, $port, $key, $db, $timeout, $copy = false, $replace = false)
 * @method static \learn\src\Db\RedisManager time()
 * @method static \learn\src\Db\RedisManager scan(&$iterator, $pattern = null, $count = 0)
 * @method static \learn\src\Db\RedisManager pfAdd($key, array $elements)
 * @method static \learn\src\Db\RedisManager pfCount($key)
 * @method static \learn\src\Db\RedisManager pfMerge($destKey, array $sourceKeys)
 * @method static \learn\src\Db\RedisManager rawCommand($command, $arguments)
 * @method static \learn\src\Db\RedisManager getMode()
 * @method static \learn\src\Db\RedisManager xAck($stream, $group, $messages)
 * @method static \learn\src\Db\RedisManager xAdd($key, $id, $messages, $maxLen = 0, $isApproximate = false)
 * @method static \learn\src\Db\RedisManager xClaim($key, $group, $consumer, $minIdleTime, $ids, $options = [])
 * @method static \learn\src\Db\RedisManager xDel($key, $ids)
 * @method static \learn\src\Db\RedisManager xGroup($operation, $key, $group, $msgId = '', $mkStream = false)
 * @method static \learn\src\Db\RedisManager xInfo($operation, $stream, $group)
 * @method static \learn\src\Db\RedisManager xLen($stream)
 * @method static \learn\src\Db\RedisManager xPending($stream, $group, $start = null, $end = null, $count = null, $consumer = null)
 * @method static \learn\src\Db\RedisManager xRange($stream, $start, $end, $count = null)
 * @method static \learn\src\Db\RedisManager xRead($streams, $count = null, $block = null)
 * @method static \learn\src\Db\RedisManager xReadGroup($group, $consumer, $streams, $count = null, $block = null)
 * @method static \learn\src\Db\RedisManager xRevRange($stream, $end, $start, $count = null)
 * @method static \learn\src\Db\RedisManager xTrim($stream, $maxLen, $isApproximate)
 * @method static \learn\src\Db\RedisManager sAddArray($key, array $values)
 *
 */
class Redis extends Facade
{
    protected static function getFacadeAccessor(): string
    {
        return 'redis';
    }
}

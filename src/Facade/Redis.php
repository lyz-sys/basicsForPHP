<?php

namespace learn\src\Facade;

/**
 * @method static bool connect($host, $port = 6379, $timeout = 0.0, $reserved = null, $retry_interval = 0, $read_timeout = 0.0)
 * @method static bool isConnected()
 * @method static false|string getHost()
 * @method static false|int getPort()
 * @method static bool|int getDbNum()
 * @method static false|float getTimeout()
 * @method static bool|float getReadTimeout()
 * @method static bool|null|string getPersistentID()
 * @method static bool|null|string getAuth()
 * @method static bool pconnect($host, $port = 6379, $timeout = 0.0, $persistentId = null, $retryInterval = 0, $readTimeout = 0.0)
 * @method static bool close()
 * @method static bool swapdb(int $db1, int $db2)
 * @method static bool setOption($option, $value)
 * @method static null|mixed getOption($option)
 * @method static string|bool ping($message = null)
 * @method static \Redis|string echo($message)
 * @method static \Redis|false|mixed|string get($key)
 * @method static \Redis|bool set($key, $value, $timeout = null)
 * @method static \Redis|bool setex($key, $expire, $value)
 * @method static \Redis|bool psetex($key, $expire, $value)
 * @method static \Redis|array|bool setnx($key, $value)
 * @method static \Redis|int del($key1, ...$otherKeys)
 * @method static \Redis|int unlink($key1, $key2 = null, $key3 = null)
 * @method static \Redis|int multi($mode = \Redis::MULTI)
 * @method static \Redis pipeline()
 * @method static \Redis|array|void exec()
 * @method static void discard()
 * @method static \Redis|void watch($key)
 * @method static void unwatch()
 * @method static \Redis|null|mixed subscribe($channels, $callback)
 * @method static \Redis|mixed psubscribe($patterns, $callback)
 * @method static \Redis|int publish($channel, $message)
 * @method static \Redis|int|array pubsub($keyword, $argument)
 * @method static void unsubscribe($channels = null)
 * @method static void punsubscribe($patterns = null)
 * @method static \Redis|bool|int exists($key)
 * @method static \Redis|int incr($key)
 * @method static \Redis|float incrByFloat($key, $increment)
 * @method static \Redis|int incrBy($key, $value)
 * @method static \Redis|int decr($key)
 * @method static \Redis|int decrBy($key, $value)
 * @method static \Redis|false|int lPush($key, ...$value1)
 * @method static \Redis|false|int rPush($key, ...$value1)
 * @method static \Redis|false|int lPushx($key, $value)
 * @method static \Redis|false|int rPushx($key, $value)
 * @method static \Redis|bool|mixed lPop($key)
 * @method static \Redis|bool|mixed rPop($key)
 * @method static \Redis|array blPop($keys, $timeout)
 * @method static \Redis|array brPop(array $keys, $timeout)
 * @method static \Redis|bool|int lLen($key)
 * @method static \Redis|bool|mixed lIndex($key, $index)
 * @method static \Redis|bool lSet($key, $index, $value)
 * @method static \Redis|array lRange($key, $start, $end)
 * @method static \Redis|false|array lTrim($key, $start, $stop)
 * @method static \Redis|bool|int lRem($key, $value, $count)
 * @method static \Redis|int lInsert($key, $position, $pivot, $value)
 * @method static \Redis|bool|int sAdd($key, ...$value1)
 * @method static \Redis|int sRem($key, ...$member1)
 * @method static \Redis|bool sMove($srcKey, $dstKey, $member)
 * @method static \Redis|bool sIsMember($key, $value)
 * @method static \Redis|int sCard($key)
 * @method static \Redis|bool|array|mixed|string sPop($key, $count = 1)
 * @method static \Redis|bool|array|mixed|string sRandMember($key, $count = 1)
 * @method static \Redis|false|array sInter($key1, ...$otherKeys)
 * @method static \Redis|false|int sInterStore($dstKey, $key1, ...$otherKeys)
 * @method static \Redis|array sUnion($key1, ...$otherKeys)
 * @method static \Redis|int sUnionStore($dstKey, $key1, ...$otherKeys)
 * @method static \Redis|array sDiff($key1, ...$otherKeys)
 * @method static \Redis|false|int sDiffStore($dstKey, $key1, ...$otherKeys)
 * @method static \Redis|array sMembers($key)
 * @method static \Redis|false|array sScan($key, &$iterator, $pattern = null, $count = 0)
 * @method static \Redis|mixed|string getSet($key, $value)
 * @method static \Redis|string randomKey()
 * @method static \Redis|bool select($dbIndex)
 * @method static \Redis|bool move($key, $dbIndex)
 * @method static \Redis|bool rename($srcKey, $dstKey)
 * @method static \Redis|bool renameNx($srcKey, $dstKey)
 * @method static \Redis|bool expire($key, $ttl)
 * @method static \Redis|bool pExpire($key, $ttl)
 * @method static \Redis|bool expireAt($key, $timestamp)
 * @method static \Redis|bool pExpireAt($key, $timestamp)
 * @method static \Redis|array keys($pattern)
 * @method static \Redis|int dbSize()
 * @method static \Redis|bool auth($password)
 * @method static \Redis|bool bgrewriteaof()
 * @method static \Redis|bool slaveof($host = '127.0.0.1', $port = 6379)
 * @method static \Redis|mixed slowLog(string $operation, int $length = null)
 * @method static \Redis|false|int|string object($string = '', $key = '')
 * @method static \Redis|bool save()
 * @method static \Redis|bool bgsave()
 * @method static \Redis|int lastSave()
 * @method static \Redis|int wait($numSlaves, $timeout)
 * @method static \Redis|int type($key)
 * @method static \Redis|int append($key, $value)
 * @method static \Redis|string getRange($key, $start, $end)
 * @method static \Redis|int setRange($key, $offset, $value)
 * @method static \Redis|int strlen($key)
 * @method static \Redis|int bitpos($key, $bit, $start = 0, $end = null)
 * @method static \Redis|int getBit($key, $offset)
 * @method static \Redis|int setBit($key, $offset, $value)
 * @method static \Redis|int bitCount($key)
 * @method static \Redis|int bitOp($operation, $retKey, $key1, ...$otherKeys)
 * @method static \Redis|bool flushDB()
 * @method static \Redis|bool flushAll()
 * @method static \Redis|array sort($key, $option = null)
 * @method static \Redis|array info($option = null)
 * @method static \Redis|array role()
 * @method static \Redis|bool resetStat()
 * @method static \Redis|bool|int ttl($key)
 * @method static \Redis|bool|int pttl($key)
 * @method static \Redis|bool persist($key)
 * @method static \Redis|bool mSet(array $array)
 * @method static \Redis|array mGet(array $array)
 * @method static \Redis|int msetnx(array $array)
 * @method static \Redis|false|mixed|string rPopLPush($srcKey, $dstKey)
 * @method static \Redis|bool|mixed|string bRPopLPush($srcKey, $dstKey, $timeout)
 * @method static \Redis|int zAdd($key, $options, $score1, $value1 = null, $score2 = null, $value2 = null, $scoreN = null, $valueN = null)
 * @method static \Redis|array zRange($key, $start, $end, $withscores = null)
 * @method static \Redis|int zRem($key, $member1, ...$otherMembers)
 * @method static \Redis|array zRevRange($key, $start, $end, $withscore = null)
 * @method static \Redis|array zRangeByScore($key, $start, $end, array $options = [])
 * @method static \Redis|array zRevRangeByScore($key, $start, $end, array $options = [])
 * @method static \Redis|false|array zRangeByLex($key, $min, $max, $offset = null, $limit = null)
 * @method static \Redis|array zRevRangeByLex($key, $min, $max, $offset = null, $limit = null)
 * @method static \Redis|int zCount($key, $start, $end)
 * @method static \Redis|int zRemRangeByScore($key, $start, $end)
 * @method static \Redis|int zRemRangeByRank($key, $start, $end)
 * @method static \Redis|int zCard($key)
 * @method static \Redis|bool|float zScore($key, $member)
 * @method static \Redis|false|int zRank($key, $member)
 * @method static \Redis|false|int zRevRank($key, $member)
 * @method static \Redis|float zIncrBy($key, $value, $member)
 * @method static \Redis|int zUnionStore($output, $zSetKeys, ?array $weights = null, $aggregateFunction = 'SUM')
 * @method static \Redis|int zInterStore($output, $zSetKeys, array $weights = null, $aggregateFunction = 'SUM')
 * @method static \Redis|false|array zScan($key, &$iterator, $pattern = null, $count = 0)
 * @method static \Redis|array bzPopMax($key1, $key2, $timeout)
 * @method static \Redis|array bzPopMin($key1, $key2, $timeout)
 * @method static \Redis|array zPopMax($key, $count = 1)
 * @method static \Redis|array zPopMin($key, $count = 1)
 * @method static \Redis|bool|int hSet($key, $hashKey, $value)
 * @method static \Redis|bool hSetNx($key, $hashKey, $value)
 * @method static \Redis|false|string hGet($key, $hashKey)
 * @method static \Redis|false|int hLen($key)
 * @method static \Redis|bool|int hDel($key, $hashKey1, ...$otherHashKeys)
 * @method static \Redis|array hKeys($key)
 * @method static \Redis|array hVals($key)
 * @method static \Redis|array hGetAll($key)
 * @method static \Redis|bool hExists($key, $hashKey)
 * @method static \Redis|int hIncrBy($key, $hashKey, $value)
 * @method static \Redis|float hIncrByFloat($key, $field, $increment)
 * @method static \Redis|bool hMSet($key, $hashKeys)
 * @method static \Redis|array hMGet($key, $hashKeys)
 * @method static \Redis|array hScan($key, &$iterator, $pattern = null, $count = 0)
 * @method static \Redis|int hStrLen(string $key, string $field)
 * @method static \Redis|int geoAdd($key, $longitude, $latitude, $member)
 * @method static \Redis|array geoHash($key, ...$member)
 * @method static \Redis|array geoPos(string $key, string $member)
 * @method static \Redis|float geoDist($key, $member1, $member2, $unit = null)
 * @method static \Redis|mixed geoRadius($key, $longitude, $latitude, $radius, $unit, array $options = null)
 * @method static \Redis|array geoRadiusByMember($key, $member, $radius, $units, array $options = null)
 * @method static \Redis|array config($operation, $key, $value)
 * @method static \Redis|mixed eval($script, $args = [], $numKeys = 0)
 * @method static \Redis|mixed evalSha($scriptSha, $args = [], $numKeys = 0)
 * @method static \Redis|mixed script($command, $script)
 * @method static null|string getLastError()
 * @method static bool clearLastError()
 * @method static mixed client($command, $value = '')
 * @method static string _prefix($value)
 * @method static mixed _unserialize($value)
 * @method static mixed _serialize($value)
 * @method static false|string dump($key)
 * @method static bool restore($key, $ttl, $value)
 * @method static bool migrate($host, $port, $key, $db, $timeout, $copy = false, $replace = false)
 * @method static array time()
 * @method static \Redis|false|array scan(&$iterator, $pattern = null, $count = 0)
 * @method static \Redis|bool pfAdd($key, array $elements)
 * @method static \Redis|int pfCount($key)
 * @method static \Redis|bool pfMerge($destKey, array $sourceKeys)
 * @method static \Redis|mixed rawCommand($command, $arguments)
 * @method static \Redis|int getMode()
 * @method static \Redis|int xAck($stream, $group, $messages)
 * @method static \Redis|string xAdd($key, $id, $messages, $maxLen = 0, $isApproximate = false)
 * @method static \Redis|array xClaim($key, $group, $consumer, $minIdleTime, $ids, $options = [])
 * @method static \Redis|int xDel($key, $ids)
 * @method static \Redis|mixed xGroup($operation, $key, $group, $msgId = '', $mkStream = false)
 * @method static \Redis|mixed xInfo($operation, $stream, $group)
 * @method static \Redis|int xLen($stream)
 * @method static \Redis|array xPending($stream, $group, $start = null, $end = null, $count = null, $consumer = null)
 * @method static \Redis|array xRange($stream, $start, $end, $count = null)
 * @method static \Redis|array xRead($streams, $count = null, $block = null)
 * @method static \Redis|array xReadGroup($group, $consumer, $streams, $count = null, $block = null)
 * @method static \Redis|array xRevRange($stream, $end, $start, $count = null)
 * @method static \Redis|int xTrim($stream, $maxLen, $isApproximate)
 * @method static \Redis|bool|int sAddArray($key, array $values)
 *
 */
class Redis extends Facade
{
    protected static function getFacadeAccessor(): string
    {
        return 'redis';
    }
}
